# Maintenance

# Authors without work
SELECT ?author WHERE {
  ?author wdt:P31 wd:Q5 .
  # Those properties are the only one used for authors on Inventaire at the moment
  FILTER NOT EXISTS { ?work wdt:P50|wdt:P2679|wdt:P2680 ?author . }
}

###

# Editions without work
SELECT ?edition WHERE {
  ?edition wdt:P31 wd:Q3331189 .
  FILTER NOT EXISTS { ?edition wdt:P629 ?work . }
}

###

# Editions without publisher
SELECT ?edition WHERE {
  ?edition wdt:P31 wd:Q3331189 .
  FILTER NOT EXISTS { ?edition wdt:P123 ?publisher . }
}

###

# Editions without language
SELECT ?edition WHERE {
  ?edition wdt:P31 wd:Q3331189 .
  FILTER NOT EXISTS { ?edition wdt:P407 ?language . }
}

###

# Editions without cover
SELECT ?edition WHERE {
  ?edition wdt:P31 wd:Q3331189 .
  FILTER NOT EXISTS { ?edition invp:P2 ?cover . }
}

###

# Editions without ISBN
SELECT ?edition WHERE {
  ?edition wdt:P31 wd:Q3331189 .
  FILTER NOT EXISTS { ?edition wdt:P212 ?isbn . }
}

###

# Works without edition
SELECT ?work WHERE {
  ?work wdt:P31 wd:Q47461344 .
  FILTER NOT EXISTS { ?edition wdt:P629 ?work . }
}

###

# Works without author
SELECT ?work WHERE {
  ?work wdt:P31 wd:Q47461344 .
  FILTER NOT EXISTS { ?work wdt:P50 ?author . }
}

###

# Type of Wikidata entities used by Inventaire items
SELECT ?type ?typeLabel (COUNT(?item) AS ?count ) WHERE {
  hint:Query hint:optimizer "None".
  ?item wdt:P1574 ?entity .
  FILTER(STRSTARTS(STR(?entity), 'http://www.wikidata.org/entity/Q')) .
  SERVICE wdq:sparql {
    ?entity wdt:P31 ?type .
    ?type rdfs:label ?typeLabel .
    FILTER(LANG(?typeLabel) = "en") .
  }
}
GROUP BY ?type ?typeLabel

###

# Authors with non-alphabetical chars
# Except whitespace - . ' and latin chars (éùàç...)
SELECT ?author ?label WHERE {
  ?author wdt:P31 wd:Q5 .
  ?author rdfs:label ?label .
  FILTER(REGEX(STR(?label), "[^a-zA-Z\\d\\s:\u00C0-\u024F'.-]", 'i')) .
}

###

# Authors that aren't used in any claim and were never edited
# Recommended admin action: delete
SELECT ?author WHERE {
  ?author wdt:P31 wd:Q5 ;
          schema:version "2"^^xsd:integer ;
          wikibase:labels "1"^^xsd:integer ;
          wikibase:statements "1"^^xsd:integer ;
  FILTER NOT EXISTS { ?work ?property ?author . }
}

###

# Find authors on same item who are actually one author with reverted names
# Ex: "Traksmaa, August" and "August Traksmaa"
# Recommended admin action: check if authors are the same human, delete one of them
SELECT DISTINCT ?author_a ?author_a_label ?item WHERE {
  ?item wdt:P50 ?author_a .
  ?item wdt:P50 ?author_b .
  ?author_a rdfs:label ?author_a_label .
  ?author_b rdfs:label ?author_b_label .

  # only authors who has a coma can be compared
  FILTER(CONTAINS(?author_a_label, ","))
  # filter if author_a label before comma is the end of author_b label
  FILTER(STRENDS(?author_b_label,STRBEFORE(?author_a_label, ",")))
}

###

# Find double homonym co-authors (Inventaire and Wikidata)
# Recommended admin action: merge homonyms
SELECT DISTINCT ?author_a ?author_b ?author_c ?author_d {
  # Find co-authors of a work
  ?work_1 wdt:P50 ?author_a .
  ?work_1 wdt:P50 ?author_b .
  ?author_a rdfs:label ?author_a_label .
  ?author_b rdfs:label ?author_b_label .

  FILTER (STR(?author_a) > STR(?author_b))

  SERVICE wdq:sparql {
    # Who's names match those of co-authors of another work
    ?work_2 wdt:P50 ?author_c .
    ?work_2 wdt:P50 ?author_d .
    ?author_c rdfs:label ?author_a_label .
    ?author_d rdfs:label ?author_b_label .
    # Make sure the authors are different and that 2 authors produce only 1 row
    FILTER (STR(?author_c) > STR(?author_d))
  }
}

###

# Find homonym co-authors (Inventaire only)
# Recommended admin action: merge homonyms
SELECT DISTINCT ?author_a ?author_b ?author_c ?author_d {

  # Find the authors of 2 works
  ?work_1 wdt:P50 ?author_a .
  ?work_1 wdt:P50 ?author_b .
  ?work_2 wdt:P50 ?author_c .
  ?work_2 wdt:P50 ?author_d .

  # For which authors are homonyms, making it very likely
  # that those are duplicates that can be merged: a->c b->d
  ?author_a rdfs:label ?author_a_label .
  ?author_b rdfs:label ?author_b_label .
  ?author_c rdfs:label ?author_a_label .
  ?author_d rdfs:label ?author_b_label .

  # Make sure the works are different and that 2 works produce only 1 row
  FILTER (STR(?work_1) > STR(?work_2))
  # Make sure the authors are different and that 2 authors produce only 1 row
  FILTER (STR(?author_a) > STR(?author_b))
  FILTER (STR(?author_c) > STR(?author_d))
  # Make sure that the homonym authors aren't just all the same authors already
  # but keep cases where one of the author is already deduplicated but not the other
  FILTER (?author_a != ?author_c || ?author_b != ?author_d)
}

###

# Find homonym co-authors (Inventaire and Wikidata)
# Recommended admin action: merge homonyms
SELECT DISTINCT ?author_b ?author_c {
  # Find the authors of 2 works
  ?work_1 wdt:P50 ?author_a .
  ?work_1 wdt:P50 ?author_b .
  ?work_2 wdt:P50 ?author_a .
  ?work_2 wdt:P50 ?author_c .
  ?author_b rdfs:label ?author_b_label .
  FILTER NOT EXISTS { ?author_c wdt:P31 ?type }
  SERVICE wdq:sparql {
    ?author_c rdfs:label ?author_b_label .
  }
}

###

# Find homonyms authors within a work
# Recommended admin action: merge homonyms
SELECT ?author_a ?author_b ?author_a_label ?author_b_label  {
  ?work wdt:P50 ?author_a .
  ?work wdt:P50 ?author_b .
  FILTER (STR(?author_a) > STR(?author_b))
  ?author_a rdfs:label ?author_a_label .
  ?author_b rdfs:label ?author_b_label .
  BIND(REPLACE(?author_a_label, "\\.", "") AS ?author_a_cleaned_label)
  BIND(REPLACE(?author_b_label, "\\.", "") AS ?author_b_cleaned_label)
  FILTER (?author_a_cleaned_label = ?author_b_cleaned_label)
}

###

# Find homonyms authors that have the same publisher
# Recommended admin action: merge homonyms
SELECT ?author_a ?author_b {

  # Find homonym authors
  ?work_a wdt:P50 ?author_a .
  ?work_b wdt:P50 ?author_b .
  FILTER (STR(?author_a) > STR(?author_b))
  ?author_a rdfs:label ?author_a_label .
  ?author_b rdfs:label ?author_b_label .
  BIND(REPLACE(?author_a_label, "\\.", "") AS ?author_a_cleaned_label)
  BIND(REPLACE(?author_b_label, "\\.", "") AS ?author_b_cleaned_label)
  FILTER (?author_a_cleaned_label = ?author_b_cleaned_label)

  # whose works' editions
  ?edition_a wdt:P629 ?work_a .
  ?edition_b wdt:P629 ?work_b .
  # have a common publisher
  ?edition_a wdt:P123 ?publisher .
  ?edition_b wdt:P123 ?publisher .

  # We could also find common publisher by comparing ISBN prefixes
  # but the query times out:

  # ?edition_a wdt:P212 ?isbn13h_a .
  # ?edition_b wdt:P212 ?isbn13h_b .
  # BIND(REPLACE(?isbn13h_a, '-\\d+-\\d+$', '') AS ?isbn_publisher_prefix_a)
  # BIND(REPLACE(?isbn13h_b, '-\\d+-\\d+$', '') AS ?isbn_publisher_prefix_b)
  # FILTER(?isbn_publisher_prefix_a = ?isbn_publisher_prefix_b)
}

###

# Find coauthors with identical names
# Recommended admin action: delete one
SELECT DISTINCT ?author_a ?author_b {
  ?work wdt:P50 ?author_a .
  ?work wdt:P50 ?author_b .
  FILTER(STR(?author_a) > STR(?author_b))
  ?author_a rdfs:label ?author_a_label .
  ?author_b rdfs:label ?author_b_label .
  FILTER(?author_b_label = ?author_a_label)
}

###

# Find coauthors who's names are partly duplicated
# like "First name" and "First name Last name"
# Recommended admin action: delete one
SELECT DISTINCT ?author_a ?author_a_label ?author_b ?author_b_label {
  ?work wdt:P50 ?author_a .
  ?work wdt:P50 ?author_b .
  FILTER(?author_a != ?author_b)
  ?author_a rdfs:label ?author_a_label .
  ?author_b rdfs:label ?author_b_label .

  # Use the query above to easily handle that case
  FILTER(?author_b_label != ?author_a_label)

  FILTER(STRSTARTS(?author_b_label, ?author_a_label))
}

###

# Find entities with labels containing Combining Diacritical Marks
# Recommended admin action: fix in bulk in database
SELECT ?item ?lang ?label WHERE {
  ?item rdfs:label ?label .
  BIND(LANG(?label) AS ?lang)
  # see https://en.wikipedia.org/wiki/Combining_Diacritical_Marks
  FILTER regex(?label, "[\\u0300-\\u036F]")
}

###

# Edition with a isbn country group code different from publisher's country of origin
# Recommended admin action: if isbn group code is inconsistent, check if edition isbn is right
SELECT ?edition ?isbn_group WHERE {
  ?edition wdt:P123 ?publisher .
  ?edition wdt:P212 ?isbn .
  SERVICE wdq:sparql {
    ?publisher wdt:P17 ?country .
    ?country wdt:P3097 ?publisher_group .
  }
  BIND((REPLACE(?isbn, "-[0-9]+-[0-9]+-[0-9]+$", "")) AS ?isbn_group)
  FILTER (STR(?publisher_group) < STR(?isbn_group))
}
GROUP BY ?edition ?isbn_group


###

# Book covers used on many books, and thus likely to be placeholders
# Recommended admin action:
# - check validity (but this is very likely to be garbage created by dataseed)
# - remove image claims
# - add images hashes to the list of banned image hashes
SELECT ?count ?imagehash ?inspect {
  {
    # Count the number of different editions sharing an image
    SELECT (COUNT(?edition) AS ?count) ?imagehash {
      {
        SELECT DISTINCT ?edition ?imagehash {
          ?edition invp:P2 ?imagehash .
        }
      }
    }
    GROUP BY ?imagehash
  }
  FILTER(?count > 10)
  BIND(URI(CONCAT("/#DESCRIBE%20%3C", STR(?imagehash), "%3E")) AS ?inspect)
}
ORDER BY DESC(?count)


###

# Entities sharing an external id
# Recommended admin action: merge
SELECT ?entity_a ?entity_b ?external_id_property ?id WHERE {
  VALUES (?external_id_property) {
    (wdt:P213) # ISNI
    (wdt:P214) # VIAF id
    (wdt:P227) # GND ID
    (wdt:P243) # OCLC control number
    (wdt:P244) # Library of Congress authority ID
    (wdt:P268) # BNF id
    (wdt:P269) # SUDOC authorities ID
    (wdt:P496) # ORCID ID
    (wdt:P648) # Open Library id
    (wdt:P675) # Google Books ID
    (wdt:P950) # Biblioteca Nacional de España ID
    (wdt:P1025) # SUDOC editions
    (wdt:P1044) # SWB editions
    (wdt:P1006) # Dutch National for Author Names ID
    (wdt:P1085) # Librarything work ID
    (wdt:P1143) # BN (Argentine) editions
    (wdt:P1144) # Library of Congress Control Number (bibliographic)
    (wdt:P1182) # LIBRIS editions
    (wdt:P1274) # ISFDB title ID
    (wdt:P1292) # DNB editions
    (wdt:P1844) # HathiTrust ID
    (wdt:P1938) # Project Gutenberg author ID
    (wdt:P1960) # Google Scholar author ID
    (wdt:P1982) # Anime News Network person ID
    (wdt:P1983) # Anime News Network company ID
    (wdt:P1984) # Anime News Network manga ID
    (wdt:P2002) # Twitter account
    (wdt:P2003) # Instagram username
    (wdt:P2013) # Facebook profile id
    (wdt:P2397) # YouTube channel ID
    (wdt:P2963) # GoodReads author ID
    (wdt:P2969) # GoodReads book ID
    (wdt:P3035) # ISBN publisher prefix
    (wdt:P3184) # Czech National Bibliography book ID
    (wdt:P3630) # Babelio author ID
    (wdt:P3631) # Babelio work ID
    (wdt:P4033) # Mastodon address
    (wdt:P4285) # Theses.fr person ID
    (wdt:P4084) # MyAnimeList people ID
    (wdt:P4087) # MyAnimeList manga ID
    (wdt:P5361) # BNB person ID
    (wdt:P5491) # BD Gest' author ID
    (wdt:P5331) # OCLC work ID
    (wdt:P5199) # British Library system number
    (wdt:P5571) # NooSFere book ID
    (wdt:P7400) # Librarything author ID
    (wdt:P8383) # Goodreads work ID
  }
  ?entity_a ?external_id_property ?id .
  ?entity_b ?external_id_property ?id .
  FILTER(?entity_a != ?entity_b)
  FILTER(STR(?entity_a) > STR(?entity_b))
}

###

# Collections with editions which have a different publisher
# than the collection's one

SELECT DISTINCT ?collection WHERE {
  ?edition wdt:P195 ?collection .
  ?collection wdt:P123 ?collectionPublisher.
  ?edition wdt:P123 ?editionPublisher.
  FILTER NOT EXISTS { ?collection wdt:P123 ?editionPublisher }
  FILTER(STR(?collectionPublisher) > STR(?editionPublisher))
}

###

# Works with publication date more recent that one of their edition publication date
# Recommended admin action: update work date by edition date
SELECT ?work ?edition ?workPublication ?editionPublication WHERE {
  ?edition wdt:P629 ?work .
  ?work wdt:P577 ?workPublication.
  ?edition wdt:P577 ?editionPublication.
  FILTER (?workPublication > ?editionPublication)
}
